#!/bin/bash

# vim:ft=bash
# Aliases for all platforms

alias vim=nvim

alias n=ncmpcpp
alias nn='ncmpcpp next'
alias np='ncmpcpp prev'
alias nr='ncmpcpp next && ncmpcpp prev' # Replay
alias nt='ncmpcpp toggle'
alias nnp='ncmpcpp --now-playing'


function ctor() {
    # Copy all ~/Download/*.torrent files to local or remote watch folder

    if ! [[ $(find ~/Downloads/ -name '*.torrent' | wc -l) = 0 ]]; then
        if [[ -d "/mnt/media/torrents/watch" ]]; then
            mv ~/Downloads/*.torrent /mnt/media/torrents/watch;
        else
            rsync -avhP --no-group ~/Downloads/*.torrent derp.home:/mnt/media/torrents/watch && rm ~/Downloads/*.torrent
        fi
    else
        echo "No torrent files to copy"
    fi
}

# Pipe to this to pretty-print json
alias ppj='python -m json.tool'

# Creds stuff
alias credd='openssl aes-256-cbc -md sha256 -d -a -in creds -out creds.txt'
alias crede='openssl aes-256-cbc -md sha256 -a -salt -in creds.txt -out creds'
alias pss='openssl aes-256-cbc -md sha256 -d -a -in $([ -f creds ] && echo creds || echo ~/me/creds) | grep -i -A 6 $1'

# Concat all ssh configs into one master config
alias sshconfig='> ~/.ssh/config && for f in ~/.ssh/configs/*; do echo "# generated from $f" >> ~/.ssh/config && grep -hv ^# $f >> ~/.ssh/config; done'
alias sshemallletgodsortemout="awsssh > ~/.ssh/configs/awsssh && sshconfig"

# Docker stuff
# Quickly get the last id of a docker container
alias dl="docker ps -l -q"
# Remove all stopped containers
alias drm='docker rm $(docker ps -a -q)'

alias lower="tr '[:upper:]' '[:lower:]'"
alias upper="tr '[:lower:]' '[:upper:]'"

function latest () {
    ls -lth | head -n ${1:-10}
}

alias cleanbranches="git branch --merged | grep -v '^\*' | xargs git branch -d"
function squash() {
    git rebase --interactive $(git merge-base master $(git branch | grep \* | cut -d ' ' -f 2))
}

alias ivlc="cvlc -I ncurses"

function t() {
    case $1 in
        "" )
            tmux ls
            ;;
        "ls" )
            tmux ls
            ;;
        "lisa" )
            tmux new-session -s $1 -c ~/workspace/lisa || tmux attach -t $1
            ;;
        "music" )
            tmux new-session -s $1 -c ~/media/Music || tmux attach -t $1
            ;;
        "envelope" )
            tmux new-session -s $1 -c ~/workspace/envelope || tmux attach -t $1
            ;;
        *)
            tmux new-session -s $1 || tmux attach -t $1
            ;;
    esac
}

alias music="t music"

function parse(){
    curl -v "https://www.readability.com/api/content/v1/parser?token=$READABILITY_PARSER_TOKEN&url=$1" | python -m json.tool
}

alias whatismyip="curl httpbin.org/ip 2>/dev/null | grep origin | cut -d '\"' -f 4"

function notify() {
    osascript -e 'display notification "'"$1"'"' &>/dev/null
}

function tea(){
    time=${1:-240}
    echo "Notification scheduled in $time seconds"
    nohup sh -c 'sleep '" $time && osascript -e 'display notification "'"Your tea is ready!"'" with title "'"Tea Time"'"'" &>/dev/null &
}

alias coffee="tea 300"

alias rcp="rsync -avhP --no-group"

alias todo='vim ~/todo'
alias standup='vim ~/notes/envelope/standup'

alias hockey='~/.virtualenvs/hockeybox/bin/python -m hockeybox.core'

function test_packet_loss() {
    ssh $2 "ip addr | grep 192" | awk '{print $2}' | cut -d '/' -f 1 | xargs -I {} ssh $1 "ping {}"
}

function recreate_db() {
    echo "
        SELECT pg_terminate_backend(pg_stat_activity.pid)
        FROM pg_stat_activity
        WHERE pg_stat_activity.datname = '$1'
        AND pid <> pg_backend_pid();
        DROP DATABASE $1;
        CREATE DATABASE $1;
    "
}

alias gcredentials="gcloud container clusters get-credentials $1"

alias singlepod="kubectl get pods -o=jsonpath='{.items[0].metadata.name}' $@"

function camfind() {
    python3 -c '\
import sys; \
import subprocess; \
lines=[x for x in open(sys.argv[1]).read().split("\n") if x]; \
len(lines) == 0 and sys.exit(1); \
file = lines[0] if len(lines) == 1 else lines[int(input("{}\nEnter Choice: ".format("\n".join(["{}: {}".format(i, e) for i, e in enumerate(lines)]))))]; \
subprocess.run(["vim", file])\
' <(find "$@")
}
